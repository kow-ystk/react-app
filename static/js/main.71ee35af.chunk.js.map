{"version":3,"sources":["ToDoListItem.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListItem","_this$props","this","props","title","description","Object","objectWithoutProperties","react_default","a","createElement","assign","className","Component","App","state","todoList","JSON","parse","localStorage","getItem","addTodo","item","callBack","_this","setState","concat","setItem","stringify","removeTodo","filter","x","_this2","onSubmit","e","preventDefault","titleElement","target","elements","descriptionElement","value","id","placeholder","type","map","todo","src_ToDoListItem_0","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAoBeA,0LAhBJ,IAAAC,EAKHC,KAAKC,MAHPC,EAFKH,EAELG,MACAC,EAHKJ,EAGLI,YACGF,EAJEG,OAAAC,EAAA,EAAAD,CAAAL,EAAA,yBAOP,OACEO,EAAAC,EAAAC,cAAA,MAAAJ,OAAAK,OAAA,CAAKC,UAAU,gBAAmBT,GAChCK,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBAAsBR,GACrCI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BAA4BP,WAXxBQ,cCsGZC,6MAlGbC,MAAQ,CACNC,SAAUC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,MAI5DC,QAAU,SAACC,EAAMC,GAEfC,EAAKC,SACH,CACET,SAAUQ,EAAKT,MAAMC,SAASU,OAAOJ,IAEvC,WAEEH,aAAaQ,QAAQ,WAAYV,KAAKW,UAAUJ,EAAKT,MAAMC,WAE3DO,GAAYA,SAMlBM,WAAa,SAACP,EAAMC,GAClBC,EAAKC,SACH,CACET,SAAUQ,EAAKT,MAAMC,SAASc,OAAO,SAAAC,GAAC,OAAIA,IAAMT,KAElD,WAEEH,aAAaQ,QAAQ,WAAYV,KAAKW,UAAUJ,EAAKT,MAAMC,WAE3DO,GAAYA,+EAMT,IAAAS,EAAA9B,KACP,OACEM,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,QACEE,UAAU,WACVqB,SAAU,SAAAC,GAERA,EAAEC,iBAGF,IAAMC,EAAeF,EAAEG,OAAOC,SAAT,MAEfC,EAAqBL,EAAEG,OAAOC,SAAT,YAE3BN,EAAKX,QACH,CACEjB,MAAOgC,EAAaI,MACpBnC,YAAakC,EAAmBC,OAElC,WAEEJ,EAAaI,MAAQ,GACrBD,EAAmBC,MAAQ,OAKjChC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE+B,GAAG,QACHC,YAAY,UAEdlC,EAAAC,EAAAC,cAAA,YACE+B,GAAG,cACHC,YAAY,iBAGhBlC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEiC,KAAK,UADP,kBAOJnC,EAAAC,EAAAC,cAAA,WAEGR,KAAKa,MAAMC,SAAS4B,IAAI,SAAAC,GAAI,OAC3BrC,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKF,EAAKzC,MACVA,MAAOyC,EAAKzC,MACZC,YAAawC,EAAKxC,YAElB2C,QAAS,kBAAMhB,EAAKH,WAAWgB,iBA5F3BhC,aCQEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71ee35af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ToDoListItem.css';\n\nclass ToDoListItem extends Component {\n  render() {\n    const {\n      title,\n      description,\n      ...props\n    } = this.props;\n\n    return (\n      <div className=\"ToDoListItem\" {...props}>\n        <div className=\"ToDoListItem-title\">{title}</div>\n        <div className=\"ToDoListItem-description\">{description}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToDoListItem;","import React, { Component } from 'react';\nimport './App.css';\nimport ToDoListItem from \"./ToDoListItem.js\"\n\nclass App extends Component {\n\n  // ToDoListをstateに定義、初期値はlocalStorageから取得または []\n  state = {\n    todoList: JSON.parse(localStorage.getItem(\"todoList\")) || []\n  }\n\n  // todoList itemの追加\n  addTodo = (item, callBack) => {\n    // todoList stateに追加\n    this.setState(\n      {\n        todoList: this.state.todoList.concat(item)\n      },\n      () => {\n        // localStorageにtodoList stateを保存\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList))\n        // callBack関数が引数に渡されていた場合に実行\n        callBack && callBack()\n      }\n    )\n  }\n\n  // todoListからitemを削除\n  removeTodo = (item, callBack) => {\n    this.setState(\n      {\n        todoList: this.state.todoList.filter(x => x !== item)\n      },\n      () => {\n        // localStorageにtodoList stateを保存\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList))\n        // callBack関数が引数に渡されていた場合に実行\n        callBack && callBack()\n      }\n    )\n  }\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <form\n          className=\"App-form\"\n          onSubmit={e => {\n            // formのデフォルトのイベントをキャンセル\n            e.preventDefault();\n\n            // idがtitleのElementを取得\n            const titleElement = e.target.elements[\"title\"]\n            // idがdescriptionのElementを取得\n            const descriptionElement = e.target.elements[\"description\"];\n\n            this.addTodo(\n              {\n                title: titleElement.value,\n                description: descriptionElement.value\n              },\n              () => {\n                // stateの変更後に入力した値を空にする\n                titleElement.value = \"\";\n                descriptionElement.value = \"\";\n              }\n            )\n          }}\n        >\n          <div>\n            <input\n              id=\"title\"\n              placeholder=\"title\"\n            />\n            <textarea\n              id=\"description\"\n              placeholder=\"description\"\n            />\n          </div>\n          <div>\n            <button\n              type=\"submit\"\n            >\n              登録\n            </button>\n          </div>\n        </form>\n        <div>\n        {/* todoList配列の要素数分ToDoListItemコンポーネントを展開 */}\n          {this.state.todoList.map(todo => (\n            <ToDoListItem\n              key={todo.title}\n              title={todo.title}\n              description={todo.description}\n              // クリックされたItemをtodoList stateから削除\n              onClick={() => this.removeTodo(todo)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}